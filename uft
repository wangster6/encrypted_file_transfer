#!/usr/bin/env python3

# Author: Ray Wang (rwang32)
# CSC 574 Mini-Project 1
# uft: unencrypted file transfer

# Import additional modules as needed.
import argparse
import sys
import socket


def print_debug(*objects, sep=' ', end='\n', file=sys.stderr, flush=False):
    """
    When stdout is redirected, messages cannot be printed to stdout as they will be written to the file, not the console.
    Use this function to print debug messages to stderr.
    It supports all optional arguments of the print function, with the exception that file is overridden to stderr.

    IMPORTANT: This function cannot be used to display debug messages in the autograder environment.

    :param objects: Any non-keyword argument that can be converted to string.
    :param sep: String to separate objects. [Default: Space]
    :param end: String to append to the end. [Default: Newline]
    :param file: Not used. Overridden to sys.stderr.
    :param flush: Forcibly flush the stream.
    """

    print(objects, sep=sep, end=end, file=sys.stderr, flush=flush)


def read_file(buffer_len):
    """
    Wrapper function for reading from stdin.
    Use < as the last option to redirect a file to stdin.
    Other options must be specified on the command line before the redirect operator.

    :param buffer_len: Number of bytes to read at once.
    :return: Raw bytes or None if buffer is empty.
    """

    return sys.stdin.buffer.read(buffer_len)


def write_file(data):
    """
    Wrapper function for writing a file to stdout.
    Use > as the last option to redirect stdout to a file.
    Other options must be specified on the command line before the redirect operator.

    :param data: raw bytes.
    """

    sys.stdout.buffer.write(data)


def server(port):
    """
    Server Code

    :param port: Port number to listen on.
    """
    # create an INET, STREAMing socket
    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # bind the socket to a public host, and a well-known port
    serversocket.bind(('', port))
    # become a server socket
    serversocket.listen(1) # to only allow 1 connection at a time

    # accept connections from outside
    print_debug("Waiting for connection")
    (clientsocket, address) = serversocket.accept()

    chunks = [] # empty list to store chunks of file data
    bytes_received = 0
    while bytes_received < 65535: # loop until max limit of 65535 bytes is reached
        length = clientsocket.recv(2) # receive first 2 bytes of message to get length of chunk
        if not length: # if no length received, exit loop
            break

        length = int.from_bytes(length, byteorder='big') # convert length to integer

        chunk = clientsocket.recv(min(1024, 65535 - bytes_received)) # receive chunk of file data
        print_debug("Chunks received: " + str(len(chunk)))
        chunks.append(chunk) # append chunk to list
        bytes_received += len(chunk) # update total bytes count

    # print_debug("Total bytes received: " + str(bytes_received))
    file_data = b''.join(chunks) # join chunks to form file data
    write_file(file_data) # write file data to stdout
    sys.stdout.flush() # flush stdout

    # Clean up the connection and socket
    print_debug("File received. Terminating program.")
    clientsocket.close()
    serversocket.close()


def client(addr, port):
    """
    Client Code

    :param addr: IP address of the server.
    :param port: Port to connect to.
    :return:
    """

    # create an INET, STREAMing socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        # connect socket to server's address and port
        print_debug("Connecting to server...")
        s.connect((addr, port))
        print_debug("Connected to server")

        buffer_len = 1024

        while True:
            chunk = read_file(buffer_len) # read file data in chunks
            if not chunk: # if no chunk read, exit loop
                break

            # send length of chunk
            length = len(chunk).to_bytes(2, byteorder='big')
            pdu = length + chunk

            # send file data in chunks
            print_debug("Chunks sent: " + str(len(chunk)))
            s.sendall(pdu)
            # print_debug("Sending data to the server...")
    except Exception as e:
        print_debug(e)
    finally:
        # Clean up the connection and socket
        print_debug("File sent. Terminating program.")
        s.close() # close socket


def parse_args():
    """
    Command Line Argument Parser

    :return: Argparse Namespace of identified command line arguments.
    """

    # Configure the argument parser.
    parser = argparse.ArgumentParser(description='Unencrypted File Transfer')
    server_group = parser.add_argument_group(
        'server_group', 'Server mode options')
    server_group.add_argument('-l', dest='server_port',
                              action='store', help='Server mode with port')
    client_group = parser.add_argument_group(
        'client_group', 'Client mode options')
    client_group.add_argument('client_ip_address', nargs='?')
    client_group.add_argument('client_port', nargs='?')

    # Parse arguments.
    args = parser.parse_args()

    # Check if arguments are valid.
    args_ok = ((args.server_port is None) and (args.client_ip_address is not None and args.client_port is not None)) or \
              ((args.server_port is not None) and (
                  args.client_ip_address is None and args.client_port is None))

    # If not, show usage message and exit.
    if not args_ok:
        print(
            "./uft [-l SERVER_PORT > OUTPUT FILE] [CLIENT_IP_ADDRESS CLIENT_PORT < INPUT_FILE]")
        sys.exit(0)

    # Otherwise return the args.
    return args


def main():
    # Parse Arguments
    args = parse_args()
    # Launch the client or server depending on the arguments received.
    if args.server_port is not None:
        port = int(args.server_port)
        server(port)
    else:
        addr = args.client_ip_address
        port = int(args.client_port)
        client(addr, port)


if __name__ == "__main__":
    main()
